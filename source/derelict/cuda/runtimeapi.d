/*
Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license ( the "Software" ) to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:
The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module derelict.cuda.runtimeapi;

/*
 * CUDA Runtime API
 * Translation of cuda_runtime_api.h and headers included by it
 */

// Current API version supported by DerelictCUDA is 6.5
enum CUDART_VERSION = 6050;


// device_types.h

alias cudaRoundMode = int;
enum : cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
}

// driver_types.h

enum cudaHostAllocDefault           = 0x00;
enum cudaHostAllocPortable          = 0x01;
enum cudaHostAllocMapped            = 0x02;
enum cudaHostAllocWriteCombined     = 0x04;
enum cudaHostRegisterDefault        = 0x00;
enum cudaHostRegisterPortable       = 0x01;
enum cudaHostRegisterMapped         = 0x02;
enum cudaPeerAccessDefault          = 0x00;
enum cudaStreamDefault              = 0x00;
enum cudaStreamNonBlocking          = 0x01;
enum cudaEventDefault               = 0x00;
enum cudaEventBlockingSync          = 0x01;
enum cudaEventDisableTiming         = 0x02;
enum cudaEventInterprocess          = 0x04;
enum cudaDeviceScheduleAuto         = 0x00;
enum cudaDeviceScheduleSpin         = 0x01;
enum cudaDeviceScheduleYield        = 0x02;
enum cudaDeviceScheduleBlockingSync = 0x04;
enum cudaDeviceBlockingSync         = 0x04;
enum cudaDeviceScheduleMask         = 0x07;
enum cudaDeviceMapHost              = 0x08;
enum cudaDeviceLmemResizeToMax      = 0x10;
enum cudaDeviceMask                 = 0x1f;
enum cudaArrayDefault               = 0x00;
enum cudaArrayLayered               = 0x01;
enum cudaArraySurfaceLoadStore      = 0x02;
enum cudaArrayCubemap               = 0x04;
enum cudaArrayTextureGather         = 0x08;
enum cudaIpcMemLazyEnablePeerAccess = 0x01;
enum cudaMemAttachGlobal            = 0x01;
enum cudaMemAttachHost              = 0x02;
enum cudaMemAttachSingle            = 0x04;

alias cudaError = int;
enum : cudaError
{
    cudaSuccess                           =      0,
    cudaErrorMissingConfiguration         =      1,
    cudaErrorMemoryAllocation             =      2,
    cudaErrorInitializationError          =      3,
    cudaErrorLaunchFailure                =      4,
    cudaErrorPriorLaunchFailure           =      5,
    cudaErrorLaunchTimeout                =      6,
    cudaErrorLaunchOutOfResources         =      7,
    cudaErrorInvalidDeviceFunction        =      8,
    cudaErrorInvalidConfiguration         =      9,
    cudaErrorInvalidDevice                =     10,
    cudaErrorInvalidValue                 =     11,
    cudaErrorInvalidPitchValue            =     12,
    cudaErrorInvalidSymbol                =     13,
    cudaErrorMapBufferObjectFailed        =     14,
    cudaErrorUnmapBufferObjectFailed      =     15,
    cudaErrorInvalidHostPointer           =     16,
    cudaErrorInvalidDevicePointer         =     17,
    cudaErrorInvalidTexture               =     18,
    cudaErrorInvalidTextureBinding        =     19,
    cudaErrorInvalidChannelDescriptor     =     20,
    cudaErrorInvalidMemcpyDirection       =     21,
    cudaErrorAddressOfConstant            =     22,
    cudaErrorTextureFetchFailed           =     23,
    cudaErrorTextureNotBound              =     24,
    cudaErrorSynchronizationError         =     25,
    cudaErrorInvalidFilterSetting         =     26,
    cudaErrorInvalidNormSetting           =     27,
    cudaErrorMixedDeviceExecution         =     28,
    cudaErrorCudartUnloading              =     29,
    cudaErrorUnknown                      =     30,
    cudaErrorNotYetImplemented            =     31,
    cudaErrorMemoryValueTooLarge          =     32,
    cudaErrorInvalidResourceHandle        =     33,
    cudaErrorNotReady                     =     34,
    cudaErrorInsufficientDriver           =     35,
    cudaErrorSetOnActiveProcess           =     36,
    cudaErrorInvalidSurface               =     37,
    cudaErrorNoDevice                     =     38,
    cudaErrorECCUncorrectable             =     39,
    cudaErrorSharedObjectSymbolNotFound   =     40,
    cudaErrorSharedObjectInitFailed       =     41,
    cudaErrorUnsupportedLimit             =     42,
    cudaErrorDuplicateVariableName        =     43,
    cudaErrorDuplicateTextureName         =     44,
    cudaErrorDuplicateSurfaceName         =     45,
    cudaErrorDevicesUnavailable           =     46,
    cudaErrorInvalidKernelImage           =     47,
    cudaErrorNoKernelImageForDevice       =     48,
    cudaErrorIncompatibleDriverContext    =     49,
    cudaErrorPeerAccessAlreadyEnabled     =     50,
    cudaErrorPeerAccessNotEnabled         =     51,
    cudaErrorDeviceAlreadyInUse           =     54,
    cudaErrorProfilerDisabled             =     55,
    cudaErrorProfilerNotInitialized       =     56,
    cudaErrorProfilerAlreadyStarted       =     57,
    cudaErrorProfilerAlreadyStopped       =     58,
    cudaErrorAssert                       =     59,
    cudaErrorTooManyPeers                 =     60,
    cudaErrorHostMemoryAlreadyRegistered  =     61,
    cudaErrorHostMemoryNotRegistered      =     62,
    cudaErrorOperatingSystem              =     63,
    cudaErrorPeerAccessUnsupported        =     64,
    cudaErrorLaunchMaxDepthExceeded       =     65,
    cudaErrorLaunchFileScopedTex          =     66,
    cudaErrorLaunchFileScopedSurf         =     67,
    cudaErrorSyncDepthExceeded            =     68,
    cudaErrorLaunchPendingCountExceeded   =     69,
    cudaErrorNotPermitted                 =     70,
    cudaErrorNotSupported                 =     71,
    cudaErrorHardwareStackError           =     72,
    cudaErrorIllegalInstruction           =     73,
    cudaErrorMisalignedAddress            =     74,
    cudaErrorInvalidAddressSpace          =     75,
    cudaErrorInvalidPc                    =     76,
    cudaErrorIllegalAddress               =     77,
    cudaErrorInvalidPtx                   =     78,
    cudaErrorInvalidGraphicsContext       =     79,
    cudaErrorStartupFailure               =   0x7f,
    cudaErrorApiFailureBase               =  10000
}

alias cudaChannelFormatKind = int;
enum : cudaChannelFormatKind
{
    cudaChannelFormatKindSigned           =   0,
    cudaChannelFormatKindUnsigned         =   1,
    cudaChannelFormatKindFloat            =   2,
    cudaChannelFormatKindNone             =   3 
}

struct cudaChannelFormatDesc
{
    int                   x;
    int                   y;
    int                   z;
    int                   w;
    cudaChannelFormatKind f;
}

alias cudaArray_t = void*;
alias cudaArray_const_t = const(void)*;
alias cudaMipmappedArray_t = void*;
alias cudaMipmappedArray_const_t = const(void)*;

alias cudaMemoryType = int;
enum : cudaMemoryType
{
    cudaMemoryTypeHost   = 1,
    cudaMemoryTypeDevice = 2 
}

alias cudaMemcpyKind = int;
enum : cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,
    cudaMemcpyHostToDevice        =   1,
    cudaMemcpyDeviceToHost        =   2,
    cudaMemcpyDeviceToDevice      =   3,
    cudaMemcpyDefault             =   4 
}

struct cudaPitchedPtr
{
    void   *ptr;
    size_t  pitch;
    size_t  xsize;
    size_t  ysize;
}

struct cudaExtent
{
    size_t width;  
    size_t height; 
    size_t depth;  
}

struct cudaPos
{
    size_t x;
    size_t y;
    size_t z;
}

struct cudaMemcpy3DParms
{
    cudaArray_t     srcArray; 
    cudaPos         srcPos;   
    cudaPitchedPtr  srcPtr;
    cudaArray_t     dstArray; 
    cudaPos         dstPos;   
    cudaPitchedPtr  dstPtr;
    cudaExtent      extent;   
    cudaMemcpyKind  kind;   
}

struct cudaMemcpy3DPeerParms
{
    cudaArray_t     srcArray;  
    cudaPos         srcPos;    
    cudaPitchedPtr  srcPtr;    
    int             srcDevice;  
    cudaArray_t     dstArray;  
    cudaPos         dstPos;    
    cudaPitchedPtr  dstPtr;    
    int             dstDevice;
    cudaExtent      extent;    
}

alias cudaGraphicsRegisterFlags = int;
enum : cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,
    cudaGraphicsRegisterFlagsReadOnly         = 1,
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
    cudaGraphicsRegisterFlagsTextureGather    = 8 
}

alias cudaGraphicsMapFlags = int;
enum : cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,
    cudaGraphicsMapFlagsReadOnly     = 1,
    cudaGraphicsMapFlagsWriteDiscard = 2 
}

alias cudaGraphicsCubeFace = int;
enum : cudaGraphicsCubeFace
{
    cudaGraphicsCubeFacePositiveX = 0x00,
    cudaGraphicsCubeFaceNegativeX = 0x01,
    cudaGraphicsCubeFacePositiveY = 0x02,
    cudaGraphicsCubeFaceNegativeY = 0x03,
    cudaGraphicsCubeFacePositiveZ = 0x04,
    cudaGraphicsCubeFaceNegativeZ = 0x05 
}

alias cudaResourceType = int;
enum : cudaResourceType
{
    cudaResourceTypeArray          = 0x00,
    cudaResourceTypeMipmappedArray = 0x01,
    cudaResourceTypeLinear         = 0x02,
    cudaResourceTypePitch2D        = 0x03 
}

alias cudaResourceViewFormat = int;
enum : cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00, 
    cudaResViewFormatUnsignedChar1             = 0x01, 
    cudaResViewFormatUnsignedChar2             = 0x02, 
    cudaResViewFormatUnsignedChar4             = 0x03, 
    cudaResViewFormatSignedChar1               = 0x04, 
    cudaResViewFormatSignedChar2               = 0x05, 
    cudaResViewFormatSignedChar4               = 0x06, 
    cudaResViewFormatUnsignedShort1            = 0x07, 
    cudaResViewFormatUnsignedShort2            = 0x08, 
    cudaResViewFormatUnsignedShort4            = 0x09, 
    cudaResViewFormatSignedShort1              = 0x0a, 
    cudaResViewFormatSignedShort2              = 0x0b, 
    cudaResViewFormatSignedShort4              = 0x0c, 
    cudaResViewFormatUnsignedInt1              = 0x0d, 
    cudaResViewFormatUnsignedInt2              = 0x0e, 
    cudaResViewFormatUnsignedInt4              = 0x0f, 
    cudaResViewFormatSignedInt1                = 0x10, 
    cudaResViewFormatSignedInt2                = 0x11, 
    cudaResViewFormatSignedInt4                = 0x12, 
    cudaResViewFormatHalf1                     = 0x13, 
    cudaResViewFormatHalf2                     = 0x14, 
    cudaResViewFormatHalf4                     = 0x15, 
    cudaResViewFormatFloat1                    = 0x16, 
    cudaResViewFormatFloat2                    = 0x17, 
    cudaResViewFormatFloat4                    = 0x18, 
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, 
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, 
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, 
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, 
    cudaResViewFormatSignedBlockCompressed4    = 0x1d, 
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, 
    cudaResViewFormatSignedBlockCompressed5    = 0x1f, 
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, 
    cudaResViewFormatSignedBlockCompressed6H   = 0x21, 
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  
}

struct cudaResourceDesc 
{
    enum cudaResourceType resType;
    
    union res_st 
    {
        struct array_st 
        {
            cudaArray_t array;
        } 
        array_st array;        

        struct mipmap_st
        {
            cudaMipmappedArray_t mipmap;
        } 
        mipmap_st mipmap;

        struct linear_st
        {
            void *devPtr;
            cudaChannelFormatDesc desc; 
            size_t sizeInBytes;                
        } 
        linear_st linear;

        struct pitch2D_st
        {
            void *devPtr;                      
            cudaChannelFormatDesc desc; 
            size_t width;                      
            size_t height;                     
            size_t pitchInBytes;               
        } 
        pitch2D_st pitch2D;
    } 
    res_st res;
}

struct cudaResourceViewDesc
{
    cudaResourceViewFormat format;           
    size_t                 width;            
    size_t                 height;           
    size_t                 depth;            
    uint                   firstMipmapLevel; 
    uint                   lastMipmapLevel;  
    uint                   firstLayer;       
    uint                   lastLayer;        
}

struct cudaPointerAttributes
{
    cudaMemoryType memoryType;
    int device;
    void *devicePointer;
    void *hostPointer;
    int isManaged;
}

struct cudaFuncAttributes
{
   size_t sharedSizeBytes;
   size_t constSizeBytes;
   size_t localSizeBytes;
   int maxThreadsPerBlock;
   int numRegs;
   int ptxVersion;
   int binaryVersion;
   int cacheModeCA;
}

alias cudaFuncCache = int;
enum : cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1     = 2,
    cudaFuncCachePreferEqual  = 3 
}

alias cudaSharedMemConfig = int;
enum : cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
}

alias cudaComputeMode = int;
enum : cudaComputeMode
{
    cudaComputeModeDefault          = 0, 
    cudaComputeModeExclusive        = 1, 
    cudaComputeModeProhibited       = 2, 
    cudaComputeModeExclusiveProcess = 3  
}


alias cudaLimit = int;
enum : cudaLimit
{
    cudaLimitStackSize                    = 0x00,
    cudaLimitPrintfFifoSize               = 0x01,
    cudaLimitMallocHeapSize               = 0x02,
    cudaLimitDevRuntimeSyncDepth          = 0x03,
    cudaLimitDevRuntimePendingLaunchCount = 0x04 
}

alias cudaOutputMode = int;
enum : cudaOutputMode
{
    cudaKeyValuePair    = 0x00,
    cudaCSV             = 0x01 
}

alias cudaDeviceAttr = int;
enum : cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,  
    cudaDevAttrMaxBlockDimX                   = 2,  
    cudaDevAttrMaxBlockDimY                   = 3,  
    cudaDevAttrMaxBlockDimZ                   = 4,  
    cudaDevAttrMaxGridDimX                    = 5,  
    cudaDevAttrMaxGridDimY                    = 6,  
    cudaDevAttrMaxGridDimZ                    = 7,  
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  
    cudaDevAttrTotalConstantMemory            = 9,  
    cudaDevAttrWarpSize                       = 10, 
    cudaDevAttrMaxPitch                       = 11, 
    cudaDevAttrMaxRegistersPerBlock           = 12, 
    cudaDevAttrClockRate                      = 13, 
    cudaDevAttrTextureAlignment               = 14, 
    cudaDevAttrGpuOverlap                     = 15, 
    cudaDevAttrMultiProcessorCount            = 16, 
    cudaDevAttrKernelExecTimeout              = 17, 
    cudaDevAttrIntegrated                     = 18, 
    cudaDevAttrCanMapHostMemory               = 19, 
    cudaDevAttrComputeMode                    = 20, 
    cudaDevAttrMaxTexture1DWidth              = 21, 
    cudaDevAttrMaxTexture2DWidth              = 22, 
    cudaDevAttrMaxTexture2DHeight             = 23, 
    cudaDevAttrMaxTexture3DWidth              = 24, 
    cudaDevAttrMaxTexture3DHeight             = 25, 
    cudaDevAttrMaxTexture3DDepth              = 26, 
    cudaDevAttrMaxTexture2DLayeredWidth       = 27, 
    cudaDevAttrMaxTexture2DLayeredHeight      = 28, 
    cudaDevAttrMaxTexture2DLayeredLayers      = 29, 
    cudaDevAttrSurfaceAlignment               = 30, 
    cudaDevAttrConcurrentKernels              = 31, 
    cudaDevAttrEccEnabled                     = 32, 
    cudaDevAttrPciBusId                       = 33, 
    cudaDevAttrPciDeviceId                    = 34, 
    cudaDevAttrTccDriver                      = 35, 
    cudaDevAttrMemoryClockRate                = 36, 
    cudaDevAttrGlobalMemoryBusWidth           = 37, 
    cudaDevAttrL2CacheSize                    = 38, 
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, 
    cudaDevAttrAsyncEngineCount               = 40, 
    cudaDevAttrUnifiedAddressing              = 41, 
    cudaDevAttrMaxTexture1DLayeredWidth       = 42, 
    cudaDevAttrMaxTexture1DLayeredLayers      = 43, 
    cudaDevAttrMaxTexture2DGatherWidth        = 45, 
    cudaDevAttrMaxTexture2DGatherHeight       = 46, 
    cudaDevAttrMaxTexture3DWidthAlt           = 47, 
    cudaDevAttrMaxTexture3DHeightAlt          = 48, 
    cudaDevAttrMaxTexture3DDepthAlt           = 49, 
    cudaDevAttrPciDomainId                    = 50, 
    cudaDevAttrTexturePitchAlignment          = 51, 
    cudaDevAttrMaxTextureCubemapWidth         = 52, 
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, 
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, 
    cudaDevAttrMaxSurface1DWidth              = 55, 
    cudaDevAttrMaxSurface2DWidth              = 56, 
    cudaDevAttrMaxSurface2DHeight             = 57, 
    cudaDevAttrMaxSurface3DWidth              = 58, 
    cudaDevAttrMaxSurface3DHeight             = 59, 
    cudaDevAttrMaxSurface3DDepth              = 60, 
    cudaDevAttrMaxSurface1DLayeredWidth       = 61, 
    cudaDevAttrMaxSurface1DLayeredLayers      = 62, 
    cudaDevAttrMaxSurface2DLayeredWidth       = 63, 
    cudaDevAttrMaxSurface2DLayeredHeight      = 64, 
    cudaDevAttrMaxSurface2DLayeredLayers      = 65, 
    cudaDevAttrMaxSurfaceCubemapWidth         = 66, 
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, 
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, 
    cudaDevAttrMaxTexture1DLinearWidth        = 69, 
    cudaDevAttrMaxTexture2DLinearWidth        = 70, 
    cudaDevAttrMaxTexture2DLinearHeight       = 71, 
    cudaDevAttrMaxTexture2DLinearPitch        = 72, 
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, 
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, 
    cudaDevAttrComputeCapabilityMajor         = 75, 
    cudaDevAttrComputeCapabilityMinor         = 76, 
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, 
    cudaDevAttrStreamPrioritiesSupported      = 78, 
    cudaDevAttrGlobalL1CacheSupported         = 79, 
    cudaDevAttrLocalL1CacheSupported          = 80, 
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
    cudaDevAttrMaxRegistersPerMultiprocessor  = 82, 
    cudaDevAttrManagedMemory                  = 83, 
    cudaDevAttrIsMultiGpuBoard                = 84, 
    cudaDevAttrMultiGpuBoardGroupID           = 85  
}

struct cudaDeviceProp
{
    char[256]   name;                  
    size_t totalGlobalMem;             
    size_t sharedMemPerBlock;          
    int    regsPerBlock;               
    int    warpSize;                   
    size_t memPitch;                   
    int    maxThreadsPerBlock;         
    int[3]    maxThreadsDim;           
    int[3]    maxGridSize;             
    int    clockRate;                  
    size_t totalConstMem;              
    int    major;                      
    int    minor;                      
    size_t textureAlignment;           
    size_t texturePitchAlignment;      
    int    deviceOverlap;              
    int    multiProcessorCount;        
    int    kernelExecTimeoutEnabled;   
    int    integrated;                 
    int    canMapHostMemory;           
    int    computeMode;                
    int    maxTexture1D;               
    int    maxTexture1DMipmap;         
    int    maxTexture1DLinear;         
    int[2]    maxTexture2D;            
    int[2]    maxTexture2DMipmap;      
    int[3]    maxTexture2DLinear;      
    int[2]    maxTexture2DGather;      
    int[3]    maxTexture3D;            
    int[3]    maxTexture3DAlt;         
    int    maxTextureCubemap;          
    int[2]    maxTexture1DLayered;     
    int[3]    maxTexture2DLayered;     
    int[2]    maxTextureCubemapLayered;
    int    maxSurface1D;               
    int[2]    maxSurface2D;
    int[3]    maxSurface3D;
    int[2]    maxSurface1DLayered;     
    int[3]    maxSurface2DLayered;     
    int    maxSurfaceCubemap;          
    int[2]    maxSurfaceCubemapLayered;
    size_t surfaceAlignment;           
    int    concurrentKernels;          
    int    ECCEnabled;                 
    int    pciBusID;                   
    int    pciDeviceID;                
    int    pciDomainID;                
    int    tccDriver;                  
    int    asyncEngineCount;           
    int    unifiedAddressing;          
    int    memoryClockRate;            
    int    memoryBusWidth;             
    int    l2CacheSize;                
    int    maxThreadsPerMultiProcessor;
    int    streamPrioritiesSupported;  
    int    globalL1CacheSupported;     
    int    localL1CacheSupported;      
    size_t sharedMemPerMultiprocessor; 
    int    regsPerMultiprocessor;      
    int    managedMemory;              
    int    isMultiGpuBoard;            
    int    multiGpuBoardGroupID;       
};

static immutable cudaDeviceProp cudaDevicePropDontCare = cudaDeviceProp(
                                                  \
          ['\0'],    
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          [0, 0, 0], 
          [0, 0, 0], 
          0,         
          0,         
          -1,        
          -1,        
          0,         
          0,         
          -1,        
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          [0, 0],    
          [0, 0],    
          [0, 0, 0], 
          [0, 0],    
          [0, 0, 0], 
          [0, 0, 0], 
          0,         
          [0, 0],    
          [0, 0, 0], 
          [0, 0],    
          0,         
          [0, 0],    
          [0, 0, 0], 
          [0, 0],    
          [0, 0, 0], 
          0,         
          [0, 0],    
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0,         
          0);

enum CUDA_IPC_HANDLE_SIZE = 64;

struct cudaIpcEventHandle_t
{
    char[CUDA_IPC_HANDLE_SIZE] reserved;
}cudaIpcEventHandle_t;

struct cudaIpcMemHandle_t 
{
    char[CUDA_IPC_HANDLE_SIZE] reserved;
};

alias cudaError_t = cudaError;
alias cudaStream_t = void*;
alias cudaEvent_t = void*;
alias cudaGraphicsResource_t = void*;

/*

What to do with it ????

typedef struct CUuuid_st cudaUUID_t;
*/


alias cudaOutputMode_t = cudaOutputMode;


